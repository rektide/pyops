var LEDS = [
[-528, -8],
[-528, -25],
[-528, -42],
[-528, -58],
[-528, -75],
[-528, -92],
[-528, -108],
[-528, -125],
[-528, -142],
[-528, -158],
[-528, -175],
[-528, -192],
[-528, -208],
[-528, -225],
[-528, -242],
[-528, -258],
[-528, -275],
[-528, -292],
[-521, -305],
[-507, -313],
[-492, -322],
[-478, -330],
[-464, -339],
[-449, -347],
[-435, -356],
[-421, -364],
[-407, -373],
[-392, -381],
[-378, -389],
[-364, -398],
[-350, -406],
[-335, -415],
[-321, -423],
[-307, -432],
[-293, -440],
[-278, -449],
[-264, -457],
[-250, -466],
[-235, -474],
[-221, -483],
[-207, -491],
[-193, -500],
[-178, -508],
[-164, -516],
[-150, -525],
[-136, -533],
[-121, -542],
[-107, -550],
[-93, -559],
[-78, -567],
[-64, -576],
[-50, -584],
[-36, -593],
[-21, -601],
[-7, -610],
[7, -610],
[21, -601],
[36, -593],
[50, -584],
[64, -576],
[78, -567],
[93, -559],
[107, -550],
[121, -542],
[136, -533],
[150, -525],
[164, -516],
[178, -508],
[193, -500],
[207, -491],
[221, -483],
[235, -474],
[250, -466],
[264, -457],
[278, -449],
[293, -440],
[307, -432],
[321, -423],
[335, -415],
[350, -406],
[364, -398],
[378, -389],
[392, -381],
[407, -373],
[421, -364],
[435, -356],
[449, -347],
[464, -339],
[478, -330],
[492, -322],
[507, -313],
[521, -305],
[528, -288],
[528, -271],
[528, -255],
[528, -238],
[528, -221],
[528, -205],
[528, -188],
[528, -171],
[528, -155],
[528, -138],
[528, -121],
[528, -105],
[528, -88],
[528, -71],
[528, -55],
[528, -38],
[528, -21],
[528, -5],
[528, 12],
[528, 29],
[528, 45],
[528, 62],
[528, 79],
[528, 95],
[528, 112],
[528, 129],
[528, 145],
[528, 162],
[528, 179],
[528, 195],
[528, 212],
[528, 229],
[528, 245],
[528, 262],
[528, 279],
[528, 295],
[521, 305],
[507, 313],
[492, 322],
[478, 330],
[464, 339],
[449, 347],
[435, 356],
[421, 364],
[407, 373],
[392, 381],
[378, 389],
[364, 398],
[350, 406],
[335, 415],
[321, 423],
[307, 432],
[293, 440],
[278, 449],
[264, 457],
[250, 466],
[235, 474],
[221, 483],
[207, 491],
[193, 500],
[178, 508],
[164, 516],
[150, 525],
[136, 533],
[121, 542],
[107, 550],
[93, 559],
[78, 567],
[64, 576],
[50, 584],
[36, 593],
[21, 601],
[7, 610],
[-7, 610],
[-21, 601],
[-36, 593],
[-50, 584],
[-64, 576],
[-78, 567],
[-93, 559],
[-107, 550],
[-121, 542],
[-136, 533],
[-150, 525],
[-164, 516],
[-178, 508],
[-193, 500],
[-207, 491],
[-221, 483],
[-235, 474],
[-250, 466],
[-264, 457],
[-278, 449],
[-293, 440],
[-307, 432],
[-321, 423],
[-335, 415],
[-350, 406],
[-364, 398],
[-378, 389],
[-392, 381],
[-407, 373],
[-421, 364],
[-435, 356],
[-449, 347],
[-464, 339],
[-478, 330],
[-492, 322],
[-507, 313],
[-528, 288],
[-528, 271],
[-528, 255],
[-528, 238],
[-528, 221],
[-528, 205],
[-528, 188],
[-528, 171],
[-528, 155],
[-528, 138],
[-528, 121],
[-528, 105],
[-528, 88],
[-528, 71],
[-528, 55],
[-528, 38],
[-528, 21],
[-528, 0]
]

var dimN = [
34.0706101624,
41.8570205819,
50.0571060604,
58.4971585831,
67.2031514313,
75.9776912146,
84.7995021347,
94.6408768044,
102.5360793199,
80.8738496815,
70.1216483142,
96.6130610337,
104.5123703793,
90.7001629673,
55.6159649948,
44.4314063152,
61.3897349913,
87.7481484836,
99.5734179503,
64.29215786,
39.1309106972,
29.0730541367,
36.682263791,
52.7480195107,
78.9138236452,
73.0467491563,
47.2327414739,
31.5281537175,
52.7480195107,
55.6159649948,
58.4971585831,
61.3897349913,
65.2615933172,
51.9509563641,
47.2327414739,
60.4243788739,
49.1133369579,
36.682263791,
32.3669349311,
39.1309106972,
43.5035155722,
39.1309106972,
38.4548628503,
34.934230732,
29.8803694227,
27.4964448036,
27.4964448036,
40.9440614985,
43.5035155722,
58.4971585831,
64.29215786,
64.29215786,
67.2031514313,
69.1480409144,
54.6584079744,
33.2146425065,
38.4548628503,
46.2961971132,
38.4548628503,
34.934230732,
28.2780564544,
32.3669349311,
40.0352616076,
46.2961971132,
60.4243788739,
68.1751975597,
60.4243788739,
51.9509563641,
43.5035155722,
49.1133369579,
31.5281537175,
31.5281537175,
32.3669349311,
45.3623617898,
64.29215786,
59.460167863,
49.1133369579,
29.8803694227,
32.3669349311,
32.3669349311,
65.2615933172,
29.8803694227,
43.5035155722,
39.1309106972]

var dimW = [
34.0706101624,
41.8570205819,
50.0571060604,
58.4971585831,
67.2031514313,
75.9776912146,
84.7995021347,
94.6408768044,
102.5360793199,
80.8738496815,
70.1216483142,
96.6130610337,
104.5123703793,
90.7001629673,
55.6159649948,
44.4314063152,
61.3897349913,
87.7481484836,
99.5734179503,
64.29215786,
39.1309106972,
29.0730541367,
36.682263791,
52.7480195107,
78.9138236452,
73.0467491563,
47.2327414739,
31.5281537175,
44.4314063152,
39.1309106972,
41.8570205819,
36.682263791,
39.1309106972,
28.2780564544,
61.3897349913,
58.4971585831,
47.2327414739,
28.2780564544,
56.574990608,
73.0467491563,
59.460167863,
31.5281537175,
30.6990305521,
51.003018216,
53.7023981057,
59.460167863,
45.3623617898,
33.2146425065,
35.8049504515,
47.2327414739,
41.8570205819,
40.9440614985,
55.6159649948,
47.2327414739,
33.2146425065,
62.3561830318,
57.5354113768,
50.0571060604,
27.4964448036,
56.574990608,
71.0959883699,
65.2615933172,
44.4314063152,
35.8049504515,
43.5035155722,
42.7738725391,
33.2146425065,
75.9776912146,
52.7480195107,
35.8049504515,
58.4971585831,
61.3897349913,
50.0571060604,
32.3669349311,
40.0352616076,
50.0571060604,
38.4548628503,
74.023115054,
53.7023981057,
35.8049504515,
45.3623617898,
50.0571060604,
50.0571060604,
55.6159649948]

var tier = [
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
3,
3,
3,
3,
3,
3,
3,
3,
3,
3,
3,
3,
3,
3,
3,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
5,
5,
5,
5,
5,
5,
6,
6,
6,
7,
]

var x = [
0,
-1143,
1143,
-2286,
0,
2286,
-3429,
-1143,
1143,
3429,
-4572,
-2286,
0,
2286,
4572,
-5715,
-3429,
-1143,
1143,
3429,
5715,
-6858,
-4572,
-2286,
0,
2286,
4572,
6858,
0,
-1143,
1143,
-2286,
0,
2286,
-3429,
-1143,
1143,
3429,
-4572,
-2286,
0,
2286,
4572,
-5715,
-3429,
-1143,
1143,
3429,
5715,
0,
-1143,
1143,
-2286,
0,
2286,
-3429,
-1143,
1143,
3429,
-4572,
-2286,
0,
2286,
4572,
0,
-1143,
1143,
-2286,
0,
2286,
-3429,
-1143,
1143,
3429,
-4572,
-2286,
0,
2286,
4572,
-5715,
0,
-1143,
1143,
0
]

var y = [
7919,
5939,
5939,
3959,
3959,
3959,
1980,
1980,
1980,
1980,
0,
0,
0,
0,
0,
-1980,
-1980,
-1980,
-1980,
-1980,
-1980,
-3959,
-3959,
-3959,
-3959,
-3959,
-3959,
-3959,
6599,
4619,
4619,
2640,
2640,
2640,
660,
660,
660,
660,
-1320,
-1320,
-1320,
-1320,
-1320,
-3300,
-3300,
-3300,
-3300,
-3300,
-3300,
5279,
3300,
5279,
3300,
3300,
1320,
1320,
1320,
1320,
-660,
-2640,
-2640,
-2640,
-2640,
-2640,
3959,
1980,
1980,
0,
0,
0,
-1980,
-1980,
-1980,
-1980,
0,
660,
660,
-1320,
-1320,
-1320,
1320,
-660,
-660,
0,
]

var z = [
762,
991,
1219,
1448,
1676,
1905,
2134,
2388,
2591,
2032,
1753,
2438,
2642,
2286,
1372,
1067,
1524,
2210,
2515,
1600,
914,
610,
838,
1295,
1981,
1829,
1143,
686,
2057,
2362,
2667,
2972,
3302,
3175,
3277,
3886,
3785,
2870,
2464,
3353,
3683,
3200,
2261,
1854,
2159,
2769,
3073,
2565,
1956,
3505,
3962,
4267,
4648,
5029,
4521,
4013,
4775,
4902,
3759,
3251,
3937,
4394,
4140,
3378,
5004,
5664,
5766,
5918,
6071,
5715,
4699,
5461,
5613,
4851,
6604,
7137,
6960,
6553,
6782,
6426,
8230,
7772,
8001,
9144
]

/**
  Generate a complete tree of platforms and LEDs
*/
function platforms(opts){
	opts= opts||{}
	geometry= opts.geometry || module.exports.geometry
	if(typeof geometry != "function"){
		geometry = (function(){return this}).bind(geometry)
	}
	material= opts.material || module.exports.material
	if(typeof material != "function"){
		material = (function(){return this}).bind(material)
	}
	var scale = opts.scale || 0.00106,
	  shift = opts.shift || 0.00108

	var platforms= []
	for(var i = 0; i < z.length; ++i){
		var platform = {}
		platform.leds= LEDS.map(function(xy,j){
			var led= new THREE.Mesh(geometry(), material())
			led.applyMatrix(new THREE.Matrix4().makeTranslation(xy[1], 0, xy[0]))
			led.applyMatrix(new THREE.Matrix4().makeScale(scale, scale, scale))
			led.applyMatrix(new THREE.Matrix4().makeTranslation(x[i]*shift, z[i]*shift, y[i]*shift))
			led.updateMatrix()
			led.matrixAutoUpdate = false

			led.platform= i
			led.local= j // which LED # on the platform
			return led
		})
		platform.centerX= x[i]
		platform.centerY= z[i]
		platform.centerZ= y[i]
		platform.tier = tier[i]
		platforms[i] = platform
	}
	platforms.index= function(platform,led){
		if(led !== undefined)
			return platforms[platform][led]
		else
			return platforms[platform]
	}
	platforms.addToScene= function(scene){
		for(var i= 0; i< this.length; ++i){
			var platform = this[i]
			for(var j in platform.leds){
				scene.add(platform.leds[j])
			}
		}
		return platforms
	}
	return platforms
}
module.exports = platforms

function distance(target){
	var distX, distY, distZ
	if(target.centerX){
		distX = this.x - target.centerX
		distY = this.y - target.centerY
		distZ = this.z - target.centerZ
	}else{
		distX = this.x - target.x
		distY = this.y - target.y
		distZ = this.z - target.z
	}
	return Math.sqrt(Math.pow(distX,2)+Math.pow(distY,2)+Math.pow(distZ,2))
}
THREE.Mesh.prototype.distance= distance

function segment(){
	if(this.local){
		return Math.floor(this.local/LEDS.length)
	}
}
THREE.Mesh.prototype.segment= segment

function simple(){
	return {x:this.position.x, y:this.position.y, z:this.position.z, platform:this.platform, local:this.local}
}
THREE.Mesh.prototype.simple= simple

// expose base data too
module.exports.LEDS= LEDS
module.exports.x= x
module.exports.y= y
module.exports.z= z

/**
  Generator or singleton for default led geometry
*/
module.exports.geometry = new THREE.BoxGeometry(25, 120, 25)
/**
  Generator or singleton for default led material
*/
module.exports.material = function(){
	return new THREE.MeshBasicMaterial({color:0x09999ff, side:THREE.FrontSide})
}
